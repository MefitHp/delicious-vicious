{
  "version": 3,
  "sources": ["../keystone.ts", "../src/keystone/schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from \"./src/keystone/schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from \"./auth\";\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: \"sqlite\",\n      url: \"file:./keystone.db\",\n    },\n    ui: {\n      basePath: \"/admin\",\n    },\n    lists,\n    session,\n    storage: {\n      // The key here will be what is referenced in the image field\n      my_local_images: {\n        // Images that use this store will be stored on the local machine\n        kind: \"local\",\n        // This store is used for the image field type\n        type: \"image\",\n        // The URL that is returned in the Keystone GraphQL API\n        generateUrl: (path) => `/images${path}`,\n        // The route that will be created in Keystone's backend to serve the images\n        serverRoute: {\n          path: \"/images\",\n        },\n        storagePath: \"public/images\",\n      },\n    },\n  })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  password,\n  timestamp,\n  integer,\n  checkbox,\n  image,\n  select,\n} from \"@keystone-6/core/fields\";\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from \"@keystone-6/fields-document\";\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from \".keystone/types\";\n\nexport const lists: Lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: \"unique\",\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: \"now\" },\n      }),\n    },\n  }),\n\n  Producto: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our Producto list\n    fields: {\n      nombre: text({ validation: { isRequired: true } }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      descripcion: text({ validation: { isRequired: true } }),\n      precio: integer({\n        validation: { isRequired: true },\n      }),\n      es_visible: checkbox(),\n      imagen: image({ storage: \"my_local_images\" }),\n      categoria: select({\n        options: [\n          {\n            label: \"Cheesecake\",\n            value: \"cheesecake\",\n          },\n          {\n            label: \"Galletas\",\n            value: \"cookie\",\n          },\n          {\n            label: \"Brownies\",\n            value: \"brownie\",\n          },\n        ],\n      }),\n    },\n  }),\n\n  Order: list({\n    access: allowAll,\n    fields: {\n      nombre_comprador: text({\n        validation: { isRequired: true },\n      }),\n      email: text({\n        validation: { isRequired: true },\n      }),\n      direccion: text({\n        validation: { isRequired: true },\n        ui: {\n          displayMode: \"textarea\",\n        },\n      }),\n      referencia: text({\n        validation: { isRequired: true },\n      }),\n      total_orden: integer({\n        validation: { isRequired: true },\n      }),\n      status: select({\n        defaultValue: \"created\",\n        options: [\n          {\n            label: \"Orden creada\",\n            value: \"created\",\n          },\n          {\n            label: \"Orden Pagada\",\n            value: \"paid\",\n          },\n          {\n            label: \"Orden Finalizada\",\n            value: \"finished\",\n          },\n        ],\n      }),\n    },\n  }),\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core"]
}
